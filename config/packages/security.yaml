security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: userName
        users_in_memory: { memory: null }
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # anonymous: true
            lazy: true
            provider: users_in_memory
            # configure the maximum login attempts in a custom period of time
            login_throttling:
                max_attempts: 3
                interval: '4 minutes'
            # custom_authenticator: App\Security\LoginFormAuthenticator
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    password_hashers:
        # use your user class name here
        App\Entity\User:
            # Use native password hasher, which auto-selects the best
            # possible hashing algorithm (starting from Symfony 5.3 this is "bcrypt")
            algorithm: auto
    role_hierarchy:
        ROLE_SUPER_USER: [ROLE_ADMIN, ROLE_ADMIN, ROLE_SUB_ADMIN, ROLE_RESELLER, ROLE_BASIC]
        ROLE_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_SUB_ADMIN: ROLE_SUB_ADMIN
        ROLE_RESELLER: ROLE_RESELLER
        ROLE_BASIC: ROLE_BASIC
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: '^/servers', roles: ROLE_SUB_ADMIN }
        # - { path: '^/subusers', roles: ROLE_ADMIN }
        # - { path: '^/config', roles: ROLE_SUPER_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/, role: ROLE_USER }
